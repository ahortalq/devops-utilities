#!/bin/bash

PROGNAME=$(basename $0)
PROGCODE=GDHIM

start_time=$(date +%s)

# Cargamos las variables de entorno
. {{ dir_base }}/get-dockerhub-images.cfg

#########################
# THE COMMAND LINE HELP #
#########################
display_help() {
    echo
    echo "Usage: $0 [option...]"
    echo
    echo "   -u userdockerhub"
    echo "   -p passworddockerhub"
    echo "   -i imagedockerhub"
    echo
}

###############################
# FUNCIONES
###############################

###############################
# 1.- PARA ESCRIBIR LOGS
###############################
log(){
    NOW=$(date +"%Y-%m-%d-%H:%M:%S")
    message="$@"
    echo $NOW" -> "$PROGCODE" "$message >> $LOG
    # Lanzamos tambien el mensaje por pantalla para Jenkins
    echo $NOW" -> "$message
}

log "---------------------------------------------------------------"
MSG="MSG-000 Se inicia la ejecucion del programa $PROGNAME"
log "$MSG"

#####################################################################
#    COMPROBAMOS QUE RECIBIMOS LOS PARAMETROS NECESARIOS            #
#####################################################################

while getopts ":u:p:i:" opt; do
    case $opt in
        u)
            log "User dockerhub received ... -u was triggered, Parameter: $OPTARG"
            UNAME=$OPTARG
            ;;
        p)
            log "Password received ... -p was triggered, Parameter: *******"
            UPASS=$OPTARG
            ;;
        i)
            log "Image name received ... -i was triggered, Parameter: $OPTARG"
            IMAGE=$OPTARG
            ;;
        \?)
            log "Invalid option: -$OPTARG, aborting ..."
            exit 1
            ;;
        :)
            log "Option -$OPTARG requires an argument, aborting ..."
            exit 1
            ;;
    esac
done

if [ -z "$UNAME" ]
then
    MSG="ERR-005 User must be provided"
    log "$MSG"
    display_help
    exit 1
fi

if [ -z "$UPASS" ]
then
    MSG="ERR-005 Password must be provided"
    log "$MSG"
    display_help
    exit 1
fi

if [ -z "$IMAGE" ]
then
    MSG="ERR-005 Image must be provided"
    log "$MSG"
    display_help
    exit 1
fi

#####################################################################
#    HEMOS RECIBIDO LOS PARAMETROS NECESARIOS                       #
#####################################################################
MSG="MSG-005 All parameters received" && log "$MSG"

###################################
#    CONFIGURACION PATH DE TRABAJO
###################################
BASEDIR=$DIR_WORK_TEMP/$IMAGE

#############################################
# ELIMINAMOS EL DIRECTORIO DE TRABAJO
#############################################
[ -d $BASEDIR ] && {
    log "$BASEDIR exists ..."
    rm -fr $BASEDIR || { log "Error deleting dir $BASEDIR"; exit 1; }
    log "Dir $BASEDIR deleted"
} || log "$BASEDIR does not exist"

#############################################
# CREAMOS EL DIRECTORIO DE TRABAJO
#############################################
if [ ! -d "$BASEDIR" ]; then
    # El directorio de trabajo no existe
    mkdir -p $BASEDIR || { log "Can not create $BASEDIR"; exit 1; }
    log "Dir $BASEDIR created"
fi

#####################################
# CAMBIAMOS AL DIRECTORIO DE TRABAJO
#####################################
cd $BASEDIR

# Example for the Docker Hub V2 API
# Returns all imagas and tags associated with a Docker Hub user account.
# Requires 'jq': https://stedolan.github.io/jq/

set -e

# aquire token
TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${UNAME}'", "password": "'${UPASS}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)

# get list of repositories for the user account
REPO_LIST=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${UNAME}/?page_size=100 | jq -r '.results|.[]|.name')

# build a list of all images & tags
# for i in ${REPO_LIST}
for i in ${IMAGE}
do
  cr=$'\r'
  i="${i%$cr}"
  # get tags for repo
  IMAGE_TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${UNAME}/${i}/tags/?page_size=100 | jq -r '.results|.[]|.name')

  # build a list of images from tags
  for j in ${IMAGE_TAGS}
  do
    # add each tag to list
    FULL_IMAGE_LIST="${FULL_IMAGE_LIST} ${UNAME}/${i}:${j}"
  done
done

# output
for i in ${FULL_IMAGE_LIST}
do
  echo ${i} >> $IMAGE.tags
done

finish_time=$(date +%s)

log "Time duration: $((finish_time - start_time)) secs."

exit 0
